
message("------------gs_project_path: " ${gs_project_path})

if (NOT gs_project_deploy_path)
    set(gs_project_deploy_path ${gs_project_path}/build/deploy)
    if (UNIX)
        set(gs_project_output_path_debug ${gs_project_deploy_path}/unix/bin_d)
        set(gs_project_output_path_release ${gs_project_deploy_path}/unix/bin)
    elseif (WIN32)
        set(gs_project_output_path_debug ${gs_project_deploy_path}/win32/bin_d)
        set(gs_project_output_path_release ${gs_project_deploy_path}/win32/bin)
        if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
            # set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -static-libgcc -static-libstdc++")
            # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")
            set(gs_project_output_path_debug ${gs_project_deploy_path}/win32/bin_gnu_d)
            set(gs_project_output_path_release ${gs_project_deploy_path}/win32/bin_gnu)
        endif()
    endif()

    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${gs_project_output_path_debug}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${gs_project_output_path_release}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${gs_project_output_path_debug}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${gs_project_output_path_release}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${gs_project_output_path_debug}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${gs_project_output_path_release}")
endif()

if (CMAKE_BUILD_TYPE STREQUAL Release)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${gs_project_output_path_release})
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DRELEASE")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DRELEASE")
else()
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${gs_project_output_path_debug})
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")
endif()
message("------------CMAKE_RUNTIME_OUTPUT_DIRECTORY: " ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})


if(APPLE)
    list(APPEND CMAKE_PREFIX_PATH /usr/local/Cellar/qt/5.14.1)
    set(gs_prefix_path_python /Library/Frameworks/Python.framework/Versions/3.6)
elseif(UNIX)
    list(APPEND CMAKE_PREFIX_PATH /fff/qt5.6.3/5.6.3/gcc_64)
elseif(WIN32)
    message("CMAKE_SIZEOF_VOID_P:" ${CMAKE_SIZEOF_VOID_P})
    if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
        set(gs_prefix_path_python C:/Python/Python36-64)
    else()
        set(gs_prefix_path_python C:/Python/Python36-32)
    endif()
    if(MSVC)
        message(${MSVC_VERSION})
        if(MSVC_VERSION EQUAL 1800) # 1800 is Visual Studio 2013
            list(APPEND CMAKE_PREFIX_PATH F:/qt5.8.0msvc2013/5.8/msvc2013)
        elseif(MSVC_VERSION EQUAL 1900)
            list(APPEND CMAKE_PREFIX_PATH F:/qt5.6.1msvc2015/5.6/msvc2015)
        elseif(MSVC_VERSION GREATER 1910)
            list(APPEND CMAKE_PREFIX_PATH F:/qt5.10.1/5.10.1/msvc2017_64)
        else()
            message("can not find qt version!!!")
        endif()
    else()
        list(APPEND CMAKE_PREFIX_PATH F:/qt5.5.1mingw4.9.2x86/5.5/mingw492_32)
        #        list(APPEND CMAKE_PREFIX_PATH F:/qt5.5.1mingw4.9/5.5/mingw492_32)
    endif()
endif()
